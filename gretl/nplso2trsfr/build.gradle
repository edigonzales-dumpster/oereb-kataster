plugins {
    id "ch.so.agi.gretl" version "1.0.5-SNAPSHOT"
}

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Paths

// Export-Verzeichnis
def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToExportFolder = Paths.get(pathToTempFolder, 'export_data')

def GROUP_DATA_NPLSO2TRSFR = "Datenumbau NPLSO -> Transferstruktur (Staging)"

task deleteStaging(type: SqlExecutor) {
    description = "Löscht die Daten aus dem Staging-Schema ($dbSchemaOerebNutzungsplanung)."
    group = GROUP_DATA_NPLSO2TRSFR
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    sqlFiles = ["delete_oereb_npl_staging.sql"]
}

// Hinweise auf die gesetzlichen Grundlagen muss in einem 
// nachgelagerten Schritt passieren, da es auf Resultate
// aus dem ersten Schritt angewiesen ist und so immer
// zu leeren Resultaten führen würde.
task insertStaging(type: SqlExecutor) {
    description = "Baut die Daten aus dem kantonalen Modell in das Rahmenmodell um und speichert sie im Staging-Schema ($dbSchemaOerebNutzungsplanung)."
    group = GROUP_DATA_NPLSO2TRSFR
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    sqlFiles = ["insert_oereb_npl_staging.sql", "insert_oereb_npl_staging_legal_basis.sql"]
}

task exportLandUsePlansToXtf(type: Ili2pgExport) {
    description = "Export die Nutzungsplanungsdaten in das OEREB-Rahmenmodell (Transferstruktur) aus dem Staging-Schema ($dbSchemaOerebNutzungsplanung)."
    group = GROUP_DATA_NPLSO2TRSFR
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelTransferstruktur
    dbschema = dbSchemaOerebNutzungsplanung
    //dataset = "ch.so.sk.legal_basis"    
    dataset = "ch.so.arp.nutzungsplanung"
    dataFile = file(Paths.get(pathToExportFolder.toString(), xtfOerebLandUsePlanFileName))
    disableValidation = true

    doLast {
        println "File exported to: " + pathToExportFolder
    }
}
