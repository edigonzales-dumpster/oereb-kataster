plugins {
    id "ch.so.agi.gretl" version "1.0.5-SNAPSHOT"
    id "de.undercouch.download" version "3.4.3"
}

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Paths

// Download-Verzeichnis
def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, 'unzip_data')

// Bundes-OEREB-Datensätze
def federalDataSets = ["ch.bav.kataster-belasteter-standorte-oev.oereb","ch.bazl.kataster-belasteter-standorte-zivilflugplaetze.oereb","ch.bazl.projektierungszonen-flughafenanlagen.oereb","ch.bazl.sicherheitszonenplan.oereb"]
def federalBaseUrl = "https://data.geo.admin.ch/"
def federalDataSetZipFileName = "/data.zip"
def pathToFederalDataSetZip = Paths.get(pathToTempFolder, "data.zip")

// Nutzungsplanungsdatensätze im kantonalen Modell
def cantonalLandUsePlansDataSets = ["2457","2498","2502","2580","2614"]
def cantonalLandUsePlansBaseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.arp.nutzungsplanung/"

// Amtliche Vermessung
def cadastralSurveyingDataSets = [2401,2402,2403,2404,2405,2406,2407,2408,2421,2422,2423,2424,2425,2426,2427,2428,2429,2445,2455,2456,2457,2461,2463,2464,2465,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2491,2492,2493,2495,2497,2498,2499,2500,2501,2502,2503,2511,2513,2514,2516,2517,2518,2519,2520,2523,2524,2525,2526,2527,2528,2529,2530,2532,2534,2535,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2553,2554,2555,2556,2571,2572,2573,2574,2575,2576,2578,2579,2580,2581,2582,2583,2584,2585,2586,2601,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622]
def cadastralSurveyingBaseUrl = "http://geoweb.so.ch/av_datenabgabe/av_daten/itf_ch/"

def GROUP_DATA_IMPORT = "Datenimport"

// Herunterladen der Bundes-OEREB-Datensätze
federalDataSets.each { federalDataSet ->
    def dataSet = federalDataSet.toString()
    task "downloadFederalData_$dataSet"(type: Download) {
        group = GROUP_DATA_IMPORT
        src federalBaseUrl + dataSet + federalDataSetZipFileName
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }
}

task downloadFederalData() {
    description = "Aggregationstask für Herunterladen sämtlicher Bundes-OEREB-Daten."
    group = GROUP_DATA_IMPORT
    doLast {
        println "All dynamic tasks were performed."
    }
}

downloadFederalData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('downloadFederalData_') }
}

// Unzippen der Bundes-OEREB-Datensätze
federalDataSets.each { federalDataSet ->
    def dataSet = federalDataSet.toString()
    task "unzipFederalData_$dataSet"(type: Copy, dependsOn: "downloadFederalData_$dataSet") {
        group = GROUP_DATA_IMPORT
        from zipTree(pathToFederalDataSetZip)
        into file(pathToUnzipFolder)
        include "**/*.xtf"
        rename { String fileName ->
            if (fileName.contains(dataSet)) {
                return dataSet+".xtf"
            }
            return fileName
        } 

        doLast {
            println "File unzipped to directory: " + pathToUnzipFolder
        }        
    }
}

task unzipFederalData() {
    description = "Aggregationstask für Unzippen sämtlicher Bundes-OEREB-Daten."
    group = GROUP_DATA_IMPORT
    doLast {
        println "All dynamic tasks were performed."
    }
}

unzipFederalData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('unzipFederalData_') }
}

// Importieren der Bundes-OEREB-Datensätze
federalDataSets.each { federalDataSet ->
    def dataSet = federalDataSet.toString()
    task "replaceFederalData_$dataSet"(type: Ili2pgReplace, dependsOn: "unzipFederalData_$dataSet") {
        group = GROUP_DATA_IMPORT
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = iliModelTransferstruktur
        dbschema = dbSchemaOereb
        dataFile = file(Paths.get(pathToUnzipFolder.toString(), dataSet + ".xtf"))
        dataset = dataSet
        disableValidation = true
    }
}

task replaceFederalData() {
    description = "Aggregationstask für Importieren/Ersetzen sämtlicher Bundes-OEREB-Daten in der OEREB-Datenbank."
    group = GROUP_DATA_IMPORT
    doLast {
        println "All dynamic tasks were performed."
    }
}

replaceFederalData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('replaceFederalData_') }
}

// Herunterladen der kantonalen Nutzungsplanungsdatensätze
cantonalLandUsePlansDataSets.each { cantonalLandUsePlansDataSet ->
    def dataSet = cantonalLandUsePlansDataSet.toString()
    task "downloadCantonalLandUsePlansData_$dataSet"(type: Download) {
        group = GROUP_DATA_IMPORT
        src cantonalLandUsePlansBaseUrl + dataSet + ".zip"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }
}

task downloadCantonalLandUsePlansData() {
    description = "Aggregationstask für Herunterladen sämtlicher Nutzungsplanungsdatensätze (im kantonalen Modell)."
    group = GROUP_DATA_IMPORT
    doLast {
        println "All dynamic tasks were performed."
    }
}

downloadCantonalLandUsePlansData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('downloadCantonalLandUsePlansData_') }
}

// Unzippen der kantonalen Nutzungsplanungsdatensätze
cantonalLandUsePlansDataSets.each { cantonalLandUsePlansDataSet ->
    def dataSet = cantonalLandUsePlansDataSet.toString()
    task "unzipCantonalLandUsePlansData_$dataSet"(type: Copy, dependsOn: "downloadCantonalLandUsePlansData_$dataSet") {
        group = GROUP_DATA_IMPORT
        from zipTree(Paths.get(pathToTempFolder, dataSet+".zip"))
        into file(pathToUnzipFolder)
        include "**/*.xtf"

        doLast {
            println "File unzipped to directory: " + pathToUnzipFolder
        }        
    }
}

task unzipCantonalLandUsePlansData() {
    description = "Aggregationstask für Unzippen sämtlicher Nutzungsplanungsdatensätze (im kantonalen Modell)."
    group = GROUP_DATA_IMPORT
    doLast {
        println "All dynamic tasks were performed."
    }
}

unzipCantonalLandUsePlansData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('unzipCantonalLandUsePlansData_') }
}

// Importieren der kantonalen Nutzungsplanungsdatensätze
cantonalLandUsePlansDataSets.each { cantonalLandUsePlansDataSet ->
    def dataSet = cantonalLandUsePlansDataSet.toString()
    task "replaceCantonalLandUsePlansData_$dataSet"(type: Ili2pgReplace, dependsOn: "unzipCantonalLandUsePlansData_$dataSet") {
        group = GROUP_DATA_IMPORT
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = iliModelNutzungsplanung
        dbschema = dbSchemaNutzungsplanung
        dataFile = file(Paths.get(pathToUnzipFolder.toString(), dataSet + ".xtf"))
        dataset = dataSet
        disableValidation = true
    }
}

task replaceCantonalLandUsePlansData() {
    description = "Aggregationstask für Importieren/Ersetzen sämtlicher Nutzungsplanungsdatensätze (im kantonalen Modell)."
    group = GROUP_DATA_IMPORT
    doLast {
        println "All dynamic tasks were performed."
    }
}

replaceCantonalLandUsePlansData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('replaceCantonalLandUsePlansData_') }
}

// Herunterladen der amtlichen Vermessung
cadastralSurveyingDataSets.each { cadastralSurveyingDataSet ->
    def dataSet = cadastralSurveyingDataSet.toString()
    task "downloadCadastralSurveyingData_$dataSet"(type: Download) {
        group = GROUP_DATA_IMPORT
        src cadastralSurveyingBaseUrl + "ch_" + dataSet + "00.zip"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }
}

task downloadCadastralSurveyingData() {
    description = "Aggregationstask für Herunterladen sämtlicher AV-Daten."
    group = GROUP_DATA_IMPORT
    doLast {
        println "All dynamic tasks were performed."
    }
}

downloadCadastralSurveyingData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('downloadCadastralSurveyingData_') }
}

// Unzippen der Datensätz der amtlichen Vermessung
cadastralSurveyingDataSets.each { cadastralSurveyingDataSet ->
    def dataSet = cadastralSurveyingDataSet.toString()
    task "unzipCadastralSurveyingData_$dataSet"(type: Copy, dependsOn: "downloadCadastralSurveyingData_$dataSet") {
        group = GROUP_DATA_IMPORT
        from zipTree(Paths.get(pathToTempFolder, "ch_"+dataSet+"00.zip"))
        into file(pathToUnzipFolder)
        include "**/*.itf"

        doLast {
            println "File unzipped to directory: " + pathToUnzipFolder
        }        
    }
}

task unzipCadastralSurveyingData() {
    description = "Aggregationstask für Unzippen sämtlicher Datensätze der amtlichen Vermessung"
    group = GROUP_DATA_IMPORT
    doLast {
        println "All dynamic tasks were performed."
    }
}

unzipCadastralSurveyingData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('unzipCadastralSurveyingData_') }
}

// Importieren der amtlichen Vermessung
cadastralSurveyingDataSets.each { cadastralSurveyingDataSet ->
    def dataSet = cadastralSurveyingDataSet.toString()
    task "replaceCadastralSurveyingData_$dataSet"(type: Ili2pgReplace, dependsOn: "unzipCadastralSurveyingData_$dataSet") {
        group = GROUP_DATA_IMPORT
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        models = iliModelAmtlicheVermessung
        dbschema = dbSchemaAmtlicheVermessung
        dataFile = file(Paths.get(pathToUnzipFolder.toString(), "ch_" + dataSet + "00.itf"))
        dataset = dataSet
        disableValidation = true
    }
}

task replaceCadastralSurveyingData() {
    description = "Aggregationstask für Importieren/Ersetzen sämtlicher Daten der amtlichen Vermessung."
    group = GROUP_DATA_IMPORT
    doLast {
        println "All dynamic tasks were performed."
    }
}

replaceCadastralSurveyingData.dependsOn {
    tasks.findAll { task -> task.name.startsWith('replaceCadastralSurveyingData_') }
}
